function [EC,conflicts] = findECInDB(gene_set, DBecNum, DBMW, geneIndex, geneHashMap)
% findECInDB
%   Collects enzyme codes for genes from the UniProt or KEGGdatabase.
%
% Input:
%   gene_set    genes from a given metabolic reaction
%   DBecNum     array of EC numbers
%   DBMW        array of molecular weights in Da
%   geneIndex   as generated by getECfromDatabase
%   geneHashMap as generated by getECfromDatabase
%
% Output:
%   EC          all EC numbers found for the genes in gene_set
%   conflicts   genes with multiple protein matches
%
% Usage:
%   [EC,conflicts] = findECInDB(gene_set, DBecNum, DBMW, geneIndex, geneHashMap)

%Preallocate function variables
conflicts = cell(1,2);

%Split the gene set and match each gene:
%gene_set  = strsplit(grRule,' and '); %this string splitting together with getSimpleGeneSets takes 2.6 s, that is ok.
EC_set    = cell(size(gene_set));

%find index indices of all genes in one call

%this loop is slow
for j = 1:length(gene_set)
     gene = gene_set{j};
     matches = [];
     %Get the indexes for all of the proteins related to gene
     if isKey(geneHashMap,gene) %annoyingly, this seems to be needed
         matchInd = cell2mat(values(geneHashMap,gene_set(j)));
         matches = geneIndex{matchInd};
     end
     if ~isempty(matches)
        %Get the indexes of the matched protein(s) with non-empty EC#s
        nonEmpty = matches(~cellfun(@isempty,DBecNum(matches)));
        if ~isempty(nonEmpty)
            [geneECs,ia] = unique(DBecNum(nonEmpty),'stable');
            %For genes with multiple proteins associated to several
            %non-empty ecNumbers
            if length(geneECs)>1
                indexes = nonEmpty(ia);
                ecNum = DBecNum(indexes);
                %Save first match
                EC_set{j}  = getECstring(EC_set{j},ecNum{1});
                %Save additional matches as potential conflicts
                if ~ismember(gene,conflicts{1})
                    conflicts{1} = [conflicts{1}; {gene}];
                    conflicts{2} = [conflicts{2}; {indexes}]; 
                end
            else
                %If there is a single unique ec number for the matched
                %protein(s), then choose the lightest protein
                [~,minW]   = min(DBMW(nonEmpty));
                matches    = nonEmpty(minW);
                EC_set{j}  = getECstring(EC_set{j},DBecNum{matches});
            end
        end
    end

    if isempty(EC_set{j})
        EC_set{j} = '';
    end
end

%EC: Find union and intersection between all units (only applies for
%complexes, i.e. length(EC_set) > 1):
uni_EC = strsplit(EC_set{1},' ');
int_EC = uni_EC;
for j = 2:length(EC_set)
    other_EC = strsplit(EC_set{j},' ');
    if isempty(uni_EC)
        uni_EC = other_EC;
        int_EC = other_EC;
    elseif ~isempty(other_EC)
        uni_EC = compare_wild([uni_EC other_EC]);
        int_EC = intersection(int_EC,other_EC);
    end
end
%Use the intersection found, if any. If not, use the union: 
if isempty(int_EC)
    EC_set = uni_EC;
else
    EC_set = int_EC;
end

%Add new codes as new possible isozymes and remove the initial "EC" text:

for i = 1:length(EC_set)
   if ~isempty(EC_set{i}) 
       EC_set{i} = extractAfter(EC_set{i},2);%remove 2 first chars
   end
end

%EC_set = cellfun(@(x) extractAfter(x,2),EC_set,'UniformOutput',false);%remove 2 first chars
EC    = strjoin(EC_set,';');


%Delete repeated Uniprots (and the corresponding ECs):
%EC(deleted)   = []; %Not sure if this needs to be done somehow, don't think so

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function int_EC = intersection(prev_EC,new_EC)
%Finds the common elements between two cell arrays, if any. Also considers
%wildcards (e.g. if 'EC1.1.1.1' is in one array and 'EC1.1.1.-' is in the
%other one, then 'EC1.1.1.1' is added to the intersection).
int_EC = {};
for i = 1:length(prev_EC)
    for j = 1:length(new_EC)
        new_int = compare_wild({prev_EC{i} new_EC{j}});
        if length(new_int) == 1
            int_EC = [int_EC new_int];
        end
    end
end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function int_EC = compare_wild(EC)
%Goes through a cell array of EC numbers, and erases any repetitions,
%considering also wildcards (e.g. will erase 'EC1.2.3.-' if 'EC1.2.3.4' is
%already present).

%Trim all EC numbers of wild cards (e.g. 'EC1.2.-.-' -> 'EC1.2.'):
EC_trimmed = EC;
for i = 1:length(EC)
    %Add a final dot for avoiding issues (e.g. 'EC1.1.1.1' & 'EC1.1.1.12'):
    ECi = [EC{i} '.'];
    pos = strfind(ECi,'-');
    if ~isempty(pos)
        ECi = ECi(1:pos(1)-1);
    end
    EC_trimmed{i} = ECi;
end

%Compare all EC numbers between them to find if 1 fits in the other:
non_repeated = true(1,length(EC));
for i = 1:length(EC)-1
    for j = i+1:length(EC)
        ECi = EC_trimmed{i};
        ECj = EC_trimmed{j};
        %If ECj fits in ECi then ECj can be disregarded:
        if strfind(ECi,ECj)
            non_repeated(j) = false;
        %Else, if ECi fits in ECj then ECi can be disregarded:
        elseif strfind(ECj,ECi)
            non_repeated(i) = false;
        end
    end
end

int_EC = EC(non_repeated);

end
