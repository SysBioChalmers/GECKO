function [rmse, exp, simulated] = rmsecal(ecModel, data, objective, biomassRxns, highObjW)
% rmsecal
%    Calculate RMSE between experimental data and simulations
%
% Input:
%   ecModel         ecModel that was generated by makeEcModel, or loaded from
%                   an earlier run. Not compatible with ecModels generated by
%                   earlier GECKO versions (pre 3.0)
%   data            experimental data to be used to calculate RMSE: rxns in rxns
%                   field and experimental data in exp field
%   objective       objective reaction
%   biomassRxns     biomass reaction(s) to calculate number of carbons for
%                   normalization (optional, default [])
%   highObjW        multiply the value of the objective function to weight
%                   it more in the rmse calculation (optional, default =
%                   10)   
%
% Ouput:
%   rmse            RMSE value
%   exp             flux values from input data
%   simulated       values from simulations

if nargin < 5
    highObjW = 10;
end

if nargin < 4
    biomassRxns = [];
end

if ~isempty(biomassRxns)
% Add carbon number to normalize
    [ecModel, ~] = addCarbonUnbalancedRxns(ecModel, biomassRxns);
else
    if ~isfield(ecModel,'excarbon')
        ecModel = addCarbonNum(ecModel);
    end
end

% Reactions used to measure error
exp_rxns = data.rxns;
% Experimental data of the reactions used to measure error
exp = data.exp;
% Get objective index in data
iObj = find(strcmp(exp_rxns, objective));
% Create vector with ones
correctFactor = ones(1,length(exp));
% Modify value for objective
correctFactor(iObj) = highObjW;
% Get index of reactions used to be evaluated (biomass reaction in this case)
[~, idx] = ismember(exp_rxns, ecModel.rxns);
% Set objective function
ecModel.c = double(strcmp(ecModel.rxns, objective));
% Solve FBA
sol = solveLP(ecModel);
if checkSolution(sol)
    fluxes = sol.x;
    % Get number of carbon for normalization
    excarbon = ecModel.excarbon(idx);
    excarbon(excarbon == 0) = 1;
    % Select only data without nan
    filter_nan = ~isnan(exp);
    % Select experimental and simulated data and multiply by carbon number
    exp_tmp = exp(filter_nan).*excarbon(filter_nan);
    % Multiply by vector to increase weight of objective function
    exp_tmp = exp_tmp.*correctFactor;
    simulated = fluxes(idx(filter_nan))';
    simulated_tmp = simulated.*excarbon(filter_nan);
    % Multiply by vector to increase weight of objective function
    simulated_tmp = simulated_tmp.*correctFactor;
    % Calculate rmse
    rmse = sqrt(immse(exp_tmp, simulated_tmp));
else
    simulated = NaN;
    rmse = NaN;
end
end